% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vis-make_transition.r
\name{make_transition-deprecated}
\alias{make_transition-deprecated}
\title{Create transition layer from polygon shapefile}
\arguments{
\item{in_file}{A sf, SpatialPolygonsDataFrame object, or a character string
with file path to polygon shapefile (with extension of *.shp). Default
arguments assume the polygon represents a water body. If the polygon
represents a land mass, then \code{invert} will need to be set to
\code{TRUE}.}

\item{output}{character, name of output file with .tif extension}

\item{output_dir}{character, directory where output file will be written. If
NULL (default), then files will be written to temporary directory that
will be deleted after R session is closed (see \link[=tempfile]{tempdir}).}

\item{res}{two element vector that specifies the x and y dimension of output
raster cells.  Units of res are same as input shapefile.}

\item{all_touched}{logical. If TRUE (default) then any pixel touched by
polygon 'in_file' will be coded as water in the output. Alternatively,
pixel must be at least 50\% covered by polygon to be coded as water.}

\item{invert}{logical. Passes into \link[gdalUtilities:gdal_rasterize]{gdal_rasterize}. If
true, it will return the inverse of the raster object it would normally
return. This can be useful if the polygon passed represents a landmass
rather than a body of water, such as the ones generated by GADM.}
}
\value{
A list with two elements:
\itemize{
\item{\verb{transition:}}{ a geo-corrected transition raster layer where land = 0
and water=1 (see \code{gdistance})}
\item{\verb{rast:}}{ rasterized input layer of class \code{raster}}}
Additionally, rasterized version of input shapefile (*.tif extension) is
written to computer at \code{output_dir}
}
\description{
Create transition layer for \link{interpolate_path} from polygon shapefile.
}
\details{
\code{make_transition} uses
\link[gdalUtilities:gdal_rasterize]{gdal_rasterize} to convert a polygon shapefile
into a raster layer and geo-corrected transition layer
\link{interpolate_path}.  Raster cell values on land = 0 and
water = 1. Function also writes a geotiff file (*.tif) of the
input shapefile to the ouput directory. Both raster layer and
geotif output have the same extents and geographic projection as
input shapefile.  Function requires that gdal is working on
computer.  To determine if gdal is installed on your computer,
see \link[gdalUtilities:gdal_rasterize]{gdal_rasterize}.

Returned objects will be projected in longlat WGS84
(i.e., CRS("+init=epsg:4326"). If the input object is not recognizable in
epsg:4326 then transformation will be attempted and a
warning will tell the user this was done.  Input shapefile must
include an optional *.prj file that specifies the geographic projection.

Output transition layer is corrected for projection
distortions using \code{gdistance::geoCorrection}.  Adjacent
cells are connected by 16 directions and transition function
returns 0 (land) for movements between land and water and 1 for
all over-water movements.
}
\examples{
\dontrun{

#Example 1 - read from sf polygon
# use example polygon for Great lakes

library(sf) #for loading great_lakes_polygon
library(raster) # for plotting rasters

# Get polygon of the Great Lakes
data(great_lakes_polygon) #glatos example data; an sf polygons object

# Make transition layer
tst <- make_transition(great_lakes_polygon, res = c(0.1, 0.1))

# plot raster layer
# notice land = 1, water = 0
plot(tst$rast)

#compare to polygon
plot(sf::st_geometry(great_lakes_polygon), add = TRUE)


#Example 2 - read from SpatialPolygonsDataFrame
# use example polygon for Great lakes

library(sp) #for loading greatLakesPoly
library(raster) # for plotting rasters

#get polygon of the Great Lakes
data(greatLakesPoly) #glatos example data; a SpatialPolygonsDataFrame

# make_transition layer
tst <- make_transition(greatLakesPoly, res = c(0.1, 0.1))

# plot raster layer
# notice land = 1, water = 0
plot(tst$rast)

#compare to polygon
plot(greatLakesPoly, add = TRUE)

# increase resolution and repeat if needed

#------------------------------------------
#Example 3 - read from ESRI Shapefile
# path to polygon shapefile
poly <- system.file("extdata", "shoreline.zip", package = "glatos")
poly <- unzip(poly, exdir = tempdir())

# make_transition layer
tst <- make_transition(poly[grepl("*.shp", poly)], res = c(0.1, 0.1))

# plot raster layer
# notice land = 0, water = 1
raster::plot(tst$rast)

# plot transition layer
raster::plot(raster::raster(tst$transition))

# increase resolution- this may take some time...
tst1 <- make_transition(poly[grepl("*.shp", poly)], res = c(0.01, 0.01))

# plot raster layer
raster::plot(tst1$rast)

# plot transition layer
raster::plot(raster::raster(tst1$transition))
}



}
\seealso{
\code{\link{glatos-deprecated}}
}
\author{
Todd Hayden, Tom Binder, Chris Holbrook
}
\keyword{internal}
